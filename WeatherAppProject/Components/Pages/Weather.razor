@page "/WeatherData"
@using Microsoft.JSInterop;
@using WeatherAppProject.Services
@using WeatherAppProject.Model
@rendermode InteractiveServer
@inject WeatherService weatherservice


<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<select @onchange="OnCityChange" class="form-select">
    <option disabled selected>Select a city</option>
    @foreach(var city in Cities)
    {
        <option value="@city">@city</option>
    }
</select>

@if (currentWeather != null)
{
    <div class="card my-3">
        <div class="card-body">
            <h4>Current Weather in @currentWeather.Name</h4>
            <p>Temperature:@(Math.Round(currentWeather.Main.Temp))°C</p>
            <p>Humidity: @currentWeather.Main.Humidity%</p>
            <p>Condition:@currentWeather.Weather[0].Description</p>
        </div>
    </div>

}
else
{
    <p>There was an Error loading the API.</p>
}

@if (forecastWeather != null && forecastWeather.List.Count > 0)
{
    <div class="d-flex flex-wrap">
        @foreach(var forecast in forecastWeather.List.Take(3)) // takes 3 upcoming days.
        {
            <div class="card m-2" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">@forecast.Dt_txt</h5>
                    <p>Temp:@(Math.Round(forecast.main.Temp))°C</p>
                    <p>Condition:@(forecast.weather !=null ? forecast.weather[0]?.Description : "No Data")</p>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No data available for forecasting try again later.</p>
}


@code {
    private string selectedCity = "Gothenburg";
    private CurrentWeather currentWeather;
    private ForecastWeather forecastWeather;

    private List<string> Cities = new List<string> {"London",
    "New York", "Gothenburg", "Tokyo", "Sydney", "Stockholm", "Paris"};

    protected override async Task OnInitializedAsync()
    {
        // Fetch weather for the default city (Gothenburg)
        await FetchWeatherData(selectedCity);
    }

    private async Task OnCityChange(ChangeEventArgs e)
    {
        selectedCity = e.Value.ToString();
        currentWeather = await weatherservice.GetWeatherAsync(selectedCity);
        forecastWeather = await weatherservice.GetWeatherForecastAsync(selectedCity);

    }

    private async Task FetchWeatherData(string city)
    {
        try
        {
            currentWeather = await weatherservice.GetWeatherAsync(city);
            forecastWeather = await weatherservice.GetWeatherForecastAsync(city);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching weather data: {ex.Message}");
        }
    }

}
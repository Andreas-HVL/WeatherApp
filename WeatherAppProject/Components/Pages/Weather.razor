@page "/WeatherData"
@using Microsoft.JSInterop;
@using WeatherAppProject.Services
@using WeatherAppProject.Model
@rendermode InteractiveServer
@inject WeatherService weatherservice


<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<select @onchange="OnCityChange" class="form-select">
    <option disabled selected>Select a city</option>
    @foreach(var city in Cities)
    {
        <option value="@city">@city</option>
    }
</select>

@if (currentWeather != null)
{
    <div class="card my-3">
        <div class="card-body">
            <h4>Current Weather in @currentWeather.Name</h4>
            @if (currentWeather.Main != null)
            {
                <p>Temperature: @(Math.Round(currentWeather.Main.Temp))°C</p>
                <p>Humidity: @currentWeather.Main.Humidity%</p>
            }
            @if (currentWeather.Weather != null && currentWeather.Weather.Length > 0)
            {
                <p>Condition: @currentWeather.Weather[0].Description</p>
            }
        </div>
    </div>

    @if (dailyForecasts?.Count > 0)
    {
        <div class="accordion" id="weatherAccordion">
            @foreach (var dailyForecast in dailyForecasts)
            {
                var collapseId = $"collapse-{dailyForecast.Date.Day}";
                <div class="card">
                    <div class="card-header" id="heading-@dailyForecast.Date.Day">
                        <h5 class="mb-0">
                            <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                                @dailyForecast.DayName - Temp: @dailyForecast.Temp°C, Condition: @dailyForecast.Condition
                            </button>
                        </h5>
                    </div>

                    <div id="@collapseId" class="collapse" aria-labelledby="heading-@dailyForecast.Date.Day" data-parent="#weatherAccordion">
                        <div class="card-body">
                            @foreach (var item in dailyForecast.HourlyForecasts)
                            {
                                <p>
                                    <strong>@item.Time:</strong> @item.Temp°C, @item.Condition
                                </p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    private string selectedCity = "Gothenburg";
    private CurrentWeather currentWeather;
    private ForecastWeather forecastWeather;
    private List<DailyForecast> dailyForecasts = new();


    private List<string> Cities = new List<string> {"London",
    "New York", "Gothenburg", "Tokyo", "Sydney", "Stockholm", "Paris"};

    protected override async Task OnInitializedAsync()
    {
        // Fetch weather for the default city (Gothenburg)
        await FetchWeatherData(selectedCity);
    }

    private async Task OnCityChange(ChangeEventArgs e)
    {
        selectedCity = e.Value.ToString();
        await FetchWeatherData(selectedCity);
    }

    private async Task FetchWeatherData(string city)
    {
        try
        {
            currentWeather = await weatherservice.GetWeatherAsync(city);
            forecastWeather = await weatherservice.GetWeatherForecastAsync(city);

            if (forecastWeather?.List != null)
            {
                dailyForecasts = forecastWeather.List
                    .GroupBy(item => DateTime.Parse(item.Dt_txt).Date)
                    .Select(group => new DailyForecast
                        {
                            Date = group.Key,
                            DayName = group.Key.DayOfWeek.ToString(),
                            Temp = (int)Math.Round(group.First().main.Temp),
                            Condition = group.First().weather[0].Description,
                            HourlyForecasts = group.Select(item => new HourlyForecast
                            {
                                Time = DateTime.Parse(item.Dt_txt).ToShortTimeString(),
                                Temp = (int)Math.Round(item.main.Temp),
                                Condition = item.weather[0].Description
                            }).ToList()
                        })
                    .Take(3)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching weather data: {ex.Message}");
        }
    }
        
    
}
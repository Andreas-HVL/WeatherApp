@page "/WeatherData"
@using Microsoft.JSInterop;
@using WeatherAppProject.Services
@using WeatherAppProject.Model

@rendermode InteractiveServer
@inject WeatherService weatherservice

<PageTitle>Weather Forecast</PageTitle>

<h1 class="text-center">Search Weather</h1>

<div class="input-group mb-4 mx-auto" style="width:25%;">
    <input type="text" 
        @bind="searchCity" 
        @bind:event="oninput" 
        placeholder="Enter city name..." 
        class="form-control" 
        @onkeypress="HandleKeyPress" />
    <button class="btn btn-primary" @onclick="OnSearchCity">Search</button>
</div>


@if (currentWeather != null)
{
    <!-- Calculate city-specific data -->
    var cityTimeNow = WeatherHelper.GetCityTime(currentWeather.Timezone);
    var sunriseTime = WeatherHelper.GetSunriseTime(currentWeather.Sys.Sunrise, currentWeather.Timezone);
    var sunsetTime = WeatherHelper.GetSunsetTime(currentWeather.Sys.Sunset, currentWeather.Timezone);
    var isNight = WeatherHelper.IsNight(currentWeather.Timezone, currentWeather.Sys.Sunrise, currentWeather.Sys.Sunset);
    var cardBackgroundStyle = WeatherHelper.GetBackgroundStyle(currentWeather.Weather[0].Description, currentWeather.Timezone, 
    currentWeather.Sys.Sunrise, currentWeather.Sys.Sunset);

    <!-- Top Current Weather Layout -->
    <div class="card mx-auto mb-4 p-4" style="width:50%; text-align:center; border:none; border-radius:15px; @cardBackgroundStyle">

        <!-- Centered Content: City Name -->
        <h2 class="mb-3" style="font-size:2rem; font-weight:bold;">@currentWeather.Name</h2>

        <!-- Temperature and Icon -->
        <div class="d-flex justify-content-center align-items-center mb-2">
            <span style="font-size:3.5rem; font-weight:bold;">@(Math.Round(currentWeather.Main.Temp))°</span>
            @if (currentWeather.Weather.Length > 0)
            {
                var iconUrl = $"https://openweathermap.org/img/wn/{currentWeather.Weather[0].Icon}@4x.png";
                <img src="@iconUrl" alt="Weather Icon" style="width:100px; height:100px; margin-left:10px;" />
            }
        </div>

        <!-- Weather Description -->
        <p class="mb-1" style="font-size:2rem; font-weight:500; position:inherit">@currentWeather.Weather[0].Description</p>

        <!-- High, Low Temperatures, and Wind Speed + time -->
        @if (dailyForecasts.Count > 0)
        {
            var todayForecast = dailyForecasts.First();
            <div class="mt-3">
                <p class="mb-1" style="font-size:1.6rem; font-weight:bold;"> Highest: @todayForecast.TempMax°</p>
                <p class="mb-1" style="font-size:1.3rem; font-weight:bold;"> Lowest: @todayForecast.TempMin°</p>
                <p class="mb-0" style="font-size:1.3rem; font-weight:bold;">💨 @currentWeather.Wind.Speed m/s</p>
                <p class="mt-3" style="font-size:1.5rem; font-weight:500;">🕒 Time: @cityTimeNow</p>
                <p style="font-size:1.5rem; font-weight:500;">🌞 UV Index: @uvIndex</p>
            </div>
        }

        <!-- City Time -->
        <!--<p class="mt-3" style="font-size:1.5rem; font-weight:500;">🕒 Time: @cityTimeNow</p>-->

        <!-- Bottom-Right Content: Sunrise and Sunset -->
        <div class="d-flex justify-content-end" style="position: relative; bottom: 20px; right: 20px;">
            <div class="text-end">
                <p class="mb-1" style="font-size:1.4rem;">🌅 Sunrise: @sunriseTime</p>
                <p class="mb-0" style="font-size:1.4rem;">🌇 Sunset: @sunsetTime</p>
            </div>
        </div>

    </div>


    <!-- Hourly Forecast -->
    @if (hourlyForecasts?.Count > 0)
    {
        var representativeCondition = hourlyForecasts
            .GroupBy(h => h.Condition)
            .OrderByDescending(g => g.Count())
            .First().Key;

        var hourlyBackgroundStyle = WeatherHelper.GetBackgroundStyle(representativeCondition, currentWeather.Timezone, currentWeather.Sys.Sunrise, currentWeather.Sys.Sunset);

        <div class="card mx-auto mb-4 p-3" style="width: 50%; @hourlyBackgroundStyle">
            <h5 class="text-center mb-3">3-Hour Forecast</h5>
            <div class="d-flex justify-content-around overflow-auto">
                @foreach (var item in hourlyForecasts)
                {
                    var iconUrl = $"https://openweathermap.org/img/wn/{item.Icon}@2x.png";
                    <div class="text-center p-2" style="min-width: 80px;">
                        <p class="mb-1 fs-5">@item.Time</p>
                        <img src="@iconUrl" alt="Weather Icon" style="width: 100px; height: 100px;" />
                        <p class="mb-0 fs-5 fw-bold">@item.Temp°C</p>
                        <p class="mb-0 fs-6">@item.Condition</p>
                    </div>
                }
            </div>
        </div>
    }

    <!-- 5-Days Forecast -->
    <div class="card mx-auto p-3" style="width: 50%; @cardBackgroundStyle">
        <h5 class="text-center mb-3">5-Days Forecast</h5>
        <div class="d-flex justify-content-around flex-wrap" style="font-size:larger">
            @foreach (var dailyForecast in dailyForecasts)
            {
                var iconUrl = $"https://openweathermap.org/img/wn/{dailyForecast.Icon}@2x.png";
                <div class="text-center mx-2 mb-2 p-3" style="min-width: 80px;">
                    <p class="mb-1" style="font-size: 1.2rem;">@dailyForecast.DayName</p>
                    <img src="@iconUrl" alt="Weather Icon" style="width: 100px; height: 100px;" />
                    <p class="mb-1" style="font-size: 1rem;">@dailyForecast.TempMax°C / @dailyForecast.TempMin°C</p>
                    <p class="mb-0" style="font-size: 0.9rem;">Chance of Rain: @dailyForecast.ChanceOfRain%</p>
                </div>
            }
        </div>
    </div>
}
else
{
    <p class="text-center">Loading weather data...</p>
}

@code {
    private CurrentWeather currentWeather;
    private List<HourlyForecast> hourlyForecasts = new();
    private List<DailyForecast> dailyForecasts = new(); 
    private string searchCity = string.Empty;
    private List<ForecastWeather> weatherData = new();
    private double uvIndex = 0.0;

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnSearchCity();
            searchCity = string.Empty;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await FetchWeatherData("Gothenburg");
    }
    private async Task OnSearchCity()
    {
        if (!string.IsNullOrWhiteSpace(searchCity))
        {
            try
            {
                //coords for geocode API to convert into lat long for UV index api call.
                //var (latitude, longitude) = await weatherservice.GetCoordinatesAsync(searchCity);

                //uvIndex = await weatherservice.GetUVIndexAsync(latitude, longitude);
                // Fetch current weather and forecast
                currentWeather = await weatherservice.GetWeatherAsync(searchCity);
                
                var forecast = await weatherservice.GetWeatherForecastAsync(searchCity);
                // Calculate city-specific local time
                var cityTimeNow = DateTime.UtcNow.AddSeconds(currentWeather.Timezone);


                // processing hourly forecast for the searched city
                var next8Hours = forecast.List
                 .Where(item =>
                 {
                     var itemTime = DateTime.Parse(item.dt).ToUniversalTime()
                         .AddSeconds(currentWeather.Timezone);
                     return itemTime >= cityTimeNow;
                 })
                 .Take(8)
                 .ToList();

                // Calculate the most frequent weather condition (mode)
                var mostFrequentCondition = next8Hours
                    .GroupBy(item => item.Weather[0].Description) // Group by weather condition description
                    .OrderByDescending(group => group.Count())    // Sort by frequency
                    .FirstOrDefault()?.Key;                       // Get the most frequent condition

                // Map hourly forecast
                hourlyForecasts = next8Hours
                    .Select(item => new HourlyForecast
                        {
                            Time = DateTime.Parse(item.dt).ToUniversalTime()
                                .AddSeconds(currentWeather.Timezone)
                                .ToShortTimeString(),
                            Temp = (int)Math.Round(item.main.Temp),
                            Icon = item.Weather[0].Icon,
                            Condition = item.Weather[0].Description
                        })
                    .ToList();


                // Process daily forecast
                dailyForecasts = forecast.List
                 .GroupBy(item => DateTime.Parse(item.dt).Date)
                 .Select(group => new DailyForecast
                     {
                         DayName = group.Key.DayOfWeek.ToString(),
                         TempMax = (int)Math.Round(group.Max(x => x.main.Temp)),
                         TempMin = (int)Math.Round(group.Min(x => x.main.Temp)),
                         ChanceOfRain = group.First().Pop * 100, // Probability of precipitation
                         Icon = group.First().Weather[0].Icon,
                         dt = cityTimeNow.ToString("HH:mm"),

                     })
                 .Take(5) // Next 5 days
                 .ToList();


                Console.WriteLine($"Local time in {currentWeather.Name}: {cityTimeNow}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error searching city: " + ex.Message);
                currentWeather = null;
            }
        }
        else
        {
            Console.WriteLine("Please enter a valid city name.");
        }
    }

    private async Task FetchWeatherData(string city)
    {
        try
        {
            //var (latitude, longitude) = await weatherservice.GetCoordinatesAsync(city);

            //uvIndex = await weatherservice.GetUVIndexAsync(latitude, longitude);
            currentWeather = await weatherservice.GetWeatherAsync(city);

            var forecast = await weatherservice.GetWeatherForecastAsync(city);
            var utcNow = DateTime.UtcNow;
            var timezoneOffset = currentWeather.Timezone;
            var cityTime = DateTime.UtcNow.AddSeconds(currentWeather.Timezone);
            // Map hourly forecast
            hourlyForecasts = forecast.List
            .Take(8)
            .Select(item => new HourlyForecast
                {
                    Time = DateTime.Parse(item.dt).ToShortTimeString(),
                    Temp = (int)Math.Round(item.main.Temp),
                    Icon = item.Weather[0].Icon,
                    Condition = item.Weather[0].Description
                }).ToList();

            // Map daily forecast (group by day)
            dailyForecasts = forecast.List
                .GroupBy(item => DateTime.Parse(item.dt).Date)
                .Select(group => new DailyForecast
                    {
                        DayName = group.Key.DayOfWeek.ToString(),
                        TempMax = (int)Math.Round(group.Max(x => x.main.Temp)),
                        TempMin = (int)Math.Round(group.Min(x => x.main.Temp)),
                        ChanceOfRain = group.First().Pop * 100, // Probability of precipitation
                        Icon = group.First().Weather[0].Icon,
                        dt = cityTime.ToString("HH:mm"),

                    })
                .Take(5) // Next 5 days
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching weather data: {ex.Message}");
        }
    }
}

    